"""Cog for server moderation commands."""
import logging
from datetime import datetime, timezone
from typing import Optional

import discord
from discord import app_commands
from discord.ext import commands

from utils.embed_utils import create_embed, create_error_embed, create_success_embed

logger = logging.getLogger(__name__)


class Moderation(commands.Cog):
    """Commands for server moderation."""

    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.db = bot.db

    mod_group = app_commands.Group(name="mod", description="L·ªánh ki·ªÉm duy·ªát cho server.")
    modlog_group = app_commands.Group(name="modlog", description="Qu·∫£n l√Ω k√™nh log ki·ªÉm duy·ªát.")

    async def _log_action(self, interaction: discord.Interaction, log_details: dict):
        """A centralized function to send logs to the configured mod log channel."""
        if not interaction.guild:
            return

        log_channel_id = await self.db.get_mod_log_channel(interaction.guild.id)
        if not log_channel_id:
            return

        log_channel = self.bot.get_channel(log_channel_id)
        if not isinstance(log_channel, discord.TextChannel):
            logger.warning(
                "Mod log channel %s not found or not a text channel for guild %s",
                log_channel_id, interaction.guild.id
            )
            return

        embed = discord.Embed(
            title=log_details.get("title"),
            color=log_details.get("color"),
            timestamp=datetime.now(timezone.utc)
        )
        embed.set_author(
            name=f"{interaction.user.display_name} ({interaction.user.id})",
            icon_url=interaction.user.display_avatar.url
        )

        target = log_details.get("target")
        if target:
            embed.add_field(name="Target", value=f"{target.mention} ({target.id})", inline=False)

        for name, value in log_details.get("fields", {}).items():
            embed.add_field(name=name.replace("_", " ").title(), value=value, inline=False)

        reason = log_details.get("reason")
        if reason:
            embed.add_field(name="Reason", value=reason, inline=False)

        try:
            await log_channel.send(embed=embed)
        except discord.Forbidden:
            logger.error(
                "Missing permissions to send to modlog channel %s in guild %s",
                log_channel.id, interaction.guild.id
            )
        except discord.HTTPException as e:
            logger.error("Failed to send to modlog channel: %s", e)

    @modlog_group.command(name="set_channel", description="[Admin] ƒê·∫∑t k√™nh ƒë·ªÉ ghi l·∫°i c√°c h√†nh ƒë·ªông ki·ªÉm duy·ªát.")
    @app_commands.describe(channel="K√™nh vƒÉn b·∫£n b·∫°n mu·ªën d√πng. ƒê·ªÉ tr·ªëng ƒë·ªÉ t·∫Øt ghi log.")
    @app_commands.checks.has_permissions(administrator=True)
    async def set_log_channel(self, interaction: discord.Interaction, channel: Optional[discord.TextChannel]):
        """Sets or disables the moderation log channel for the guild."""
        if not interaction.guild_id:
            return

        await interaction.response.defer(ephemeral=True)

        channel_id_to_save = channel.id if channel else None
        await self.db.set_mod_log_channel(interaction.guild_id, channel_id_to_save)

        if channel:
            message = f"K√™nh log ki·ªÉm duy·ªát ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh {channel.mention}."
            try:
                log_embed = create_embed(
                    "Logger Enabled",
                    f"K√™nh n√†y s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ghi l·∫°i c√°c h√†nh ƒë·ªông ki·ªÉm duy·ªát, "
                    f"ƒë∆∞·ª£c thi·∫øt l·∫≠p b·ªüi {interaction.user.mention}."
                )
                await channel.send(embed=log_embed)
            except discord.Forbidden:
                message += "\n‚ö†Ô∏è **C·∫£nh b√°o:** Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn trong k√™nh ƒë√≥."
        else:
            message = "ƒê√£ t·∫Øt ch·ª©c nƒÉng ghi log ki·ªÉm duy·ªát."

        await interaction.followup.send(embed=create_success_embed(message), ephemeral=True)

    @mod_group.command(name="clear", description="[Mod] X√≥a m·ªôt s·ªë l∆∞·ª£ng tin nh·∫Øn trong k√™nh hi·ªán t·∫°i.")
    @app_commands.describe(amount="S·ªë l∆∞·ª£ng tin nh·∫Øn mu·ªën x√≥a (t·ªëi ƒëa 100).")
    @app_commands.checks.has_permissions(manage_messages=True)
    async def clear(self, interaction: discord.Interaction, amount: app_commands.Range[int, 1, 100]):
        """Clears a specified number of messages from the current channel."""
        await interaction.response.defer(ephemeral=True)

        if not isinstance(interaction.channel, discord.TextChannel):
            await interaction.followup.send(
                embed=create_error_embed("Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn trong lo·∫°i k√™nh n√†y."), ephemeral=True
            )
            return

        deleted = await interaction.channel.purge(limit=amount)
        await interaction.followup.send(
            embed=create_success_embed(f"ƒê√£ x√≥a th√†nh c√¥ng {len(deleted)} tin nh·∫Øn."), ephemeral=True
        )

        log_details = {
            "title": "üóëÔ∏è Messages Cleared",
            "color": discord.Color.orange(),
            "fields": {
                "Channel": interaction.channel.mention,
                "Amount": f"{len(deleted)}",
            }
        }
        await self._log_action(interaction, log_details)

    async def _check_moderation_permissions(
        self, interaction: discord.Interaction, member: discord.Member
    ) -> Optional[discord.Embed]:
        """Performs standard permission checks for kick/ban commands."""
        if not interaction.guild:
            return create_error_embed("L·ªánh n√†y ch·ªâ c√≥ th·ªÉ d√πng trong server.")
        if member.id == interaction.user.id:
            return create_error_embed("B·∫°n kh√¥ng th·ªÉ t·ª± th·ª±c hi·ªán h√†nh ƒë·ªông n√†y v·ªõi ch√≠nh m√¨nh.")
        if member.top_role >= interaction.user.top_role and interaction.guild.owner_id != interaction.user.id:
            return create_error_embed("B·∫°n kh√¥ng th·ªÉ th·ª±c hi·ªán v·ªõi ng∆∞·ªùi c√≥ vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng b·∫°n.")
        if member.id == self.bot.user.id:
            return create_error_embed("...")
        return None

    @mod_group.command(name="kick", description="[Mod] Kick m·ªôt th√†nh vi√™n kh·ªèi server.")
    @app_commands.describe(member="Th√†nh vi√™n c·∫ßn kick.", reason="L√Ω do kick (kh√¥ng b·∫Øt bu·ªôc).")
    @app_commands.checks.has_permissions(kick_members=True)
    async def kick(
        self, interaction: discord.Interaction, member: discord.Member, reason: Optional[str] = None
    ):
        """Kicks a member from the server."""
        permission_error = await self._check_moderation_permissions(interaction, member)
        if permission_error:
            await interaction.response.send_message(embed=permission_error, ephemeral=True)
            return

        await interaction.response.defer(ephemeral=True)
        reason = reason or "Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p."

        try:
            dm_embed = create_embed(
                "Th√¥ng B√°o Kick",
                f"B·∫°n ƒë√£ b·ªã kick kh·ªèi server **{interaction.guild.name}**.\n**L√Ω do:** {reason}",
                color=discord.Color.orange()
            )
            await member.send(embed=dm_embed)
        except discord.Forbidden:
            pass  # User has DMs disabled

        await member.kick(reason=reason)
        await interaction.followup.send(
            embed=create_success_embed(f"ƒê√£ kick th√†nh c√¥ng {member.mention}."), ephemeral=True
        )

        log_details = {
            "title": "üë¢ Member Kicked",
            "color": discord.Color.orange(),
            "target": member,
            "reason": reason
        }
        await self._log_action(interaction, log_details)

    @mod_group.command(name="ban", description="[Mod] Ban m·ªôt th√†nh vi√™n kh·ªèi server.")
    @app_commands.describe(
        member="Th√†nh vi√™n c·∫ßn ban.",
        reason="L√Ω do ban (kh√¥ng b·∫Øt bu·ªôc).",
        delete_message_days="S·ªë ng√†y tin nh·∫Øn c·ªßa ng∆∞·ªùi n√†y s·∫Ω b·ªã x√≥a (0-7)."
    )
    @app_commands.checks.has_permissions(ban_members=True)
    async def ban(
        self,
        interaction: discord.Interaction,
        member: discord.Member,
        reason: Optional[str] = None,
        delete_message_days: app_commands.Range[int, 0, 7] = 0
    ):
        """Bans a member from the server."""
        permission_error = await self._check_moderation_permissions(interaction, member)
        if permission_error:
            await interaction.response.send_message(embed=permission_error, ephemeral=True)
            return

        await interaction.response.defer(ephemeral=True)
        reason = reason or "Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p."

        try:
            dm_embed = create_embed(
                "Th√¥ng B√°o Ban",
                f"B·∫°n ƒë√£ b·ªã ban kh·ªèi server **{interaction.guild.name}**.\n**L√Ω do:** {reason}",
                color=discord.Color.red()
            )
            await member.send(embed=dm_embed)
        except discord.Forbidden:
            pass  # User has DMs disabled

        await member.ban(reason=reason, delete_message_days=delete_message_days)
        await interaction.followup.send(
            embed=create_success_embed(f"ƒê√£ ban vƒ©nh vi·ªÖn {member.mention}."), ephemeral=True
        )

        log_details = {
            "title": "üî® Member Banned",
            "color": discord.Color.red(),
            "target": member,
            "reason": reason,
            "fields": {"Deleted Messages": f"{delete_message_days} ng√†y"}
        }
        await self._log_action(interaction, log_details)


async def setup(bot: commands.Bot):
    """Loads the Moderation cog."""
    await bot.add_cog(Moderation(bot))
